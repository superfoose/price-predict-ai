import yfinance as yf
import pandas as pd
import plotly.graph_objs as go
import subprocess
import pandas_ta as ta
from plotly.subplots import make_subplots
from indicators.advanced_macd import advanced_macd

symbol = "AAPL"
df = yf.download(symbol, interval="1m", period="2d")
print(df)
macd, signal, hist = advanced_macd(df['Close'])
print(macd, signal)
def run_script_and_read_csv(path, symbol):
    # Run the specified script in a separate process
    subprocess.run(["python", path, symbol], check=True)

    # Read the CSV generated by the script
    csv_path = f"lcdir/lc{symbol}.csv"
    df = pd.read_csv(csv_path)

    return df[["signal", "prediction"]]

# Run your script and get lcdf
lcdf = run_script_and_read_csv("../runlcdir/runlc1.py", symbol)

# Check if a chart exists (e.g., 'fig1')
if 'fig1' in locals():
    # The chart variable 'fig1' exists, indicating that the chart has been created.
    print("Chart fig1 exists.")
else:
    # The chart variable 'fig1' does not exist, indicating that the chart has not been created.
    print("Chart fig1 does not exist.")


# Trim lcdf to match the length of df
lcdf = lcdf.iloc[-len(df):]

# Calculate RSI and SMA(RSI) using pandas_ta
rsi = ta.rsi(df["Close"], 14)
sma = ta.sma(rsi, 9)

# Calculate StochRSI using pandas_ta
df.ta.stochrsi(length=14, append=True)
macd, signal, hist = advanced_macd(df['Close'])
print(macd, signal)
# Create a Plotly figure with subplots



import plotly.graph_objects as go

# Create a subplot grid
fig = make_subplots(rows=3, cols=1, shared_xaxes=True, vertical_spacing=0.05)

# Add candlestick chart to the first subplot
fig.add_trace(go.Candlestick(
    x=df.index,
    open=df['Open'],
    high=df['High'],
    low=df['Low'],
    close=df['Close'],
    name='Candlesticks'
), row=1, col=1)

# Create Scatter traces for lcdf with green and red based on the 'signal' column
fig.add_trace(go.Scatter(
    x=df.index,
    y=df['Close'],
    mode='lines',
    line=dict(color='green' if lcdf["signal"].iloc[-1] == 1 else 'red'),
    name='LCDF'
), row=1, col=1)

# Add text labels for 'prediction' values to the main chart subplot
for i, prediction in enumerate(lcdf["prediction"]):
    fig.add_annotation(
        go.layout.Annotation(
            x=df.index[i],
            y=df["Close"].iloc[i],
            text=str(prediction) + " " + str(lcdf["signal"].iloc[i]),
            showarrow=False,
            font=dict(color='black'),  # Optional: Set font color
        ), row=1, col=1
    )

# Add RSI and SMA(RSI) to the RSI subplot
fig.add_trace(go.Scatter(x=df.index, y=macd, mode='lines', name='macd'), row=2, col=1)
fig.add_trace(go.Scatter(x=df.index, y=signal, mode='lines', name='SMA(RSI)'), row=2, col=1)

# Add StochRSI to the StochRSI subplot
fig.add_trace(go.Scatter(x=df.index, y=df['STOCHRSId_14_14_3_3'], mode='lines', name='StochRSI %D'), row=3, col=1)
fig.add_trace(go.Scatter(x=df.index, y=df['STOCHRSIk_14_14_3_3'], mode='lines', name='StochRSI %K'), row=3, col=1)

# fig.add_trace(go.Scatter(x=df.index, y=df['STOCHRSIk_14_14_3_3'], mode='lines', name='StochRSI %K'), row=3, col=1)


# Update subplot settings
fig.update_layout(
    xaxis_rangeslider_visible=False,
    xaxis=dict(type='category'),
    yaxis=dict(title='Price', showgrid=False),
    yaxis2=dict(title='RSI', showgrid=False),
    yaxis3=dict(title='StochRSI', showgrid=False),
    yaxis4=dict(title='Indicators', overlaying='y', side='right'),
)

# Show the plot
fig.show()



# fig = make_subplots(rows=3, cols=1, shared_xaxes=True, vertical_spacing=0.02, row_heights=[0.6, 0.2, 0.2])
#
# # Add candlestick trace to the main chart subplot
# fig.add_trace(go.Candlestick(x=df.index,
#                 open=df['Open'],
#                 high=df['High'],
#                 low=df['Low'],
#                 close=df['Close'],
#                 name='Candlesticks'), row=1, col=1)
#
# # Create Scatter traces for lcdf with green and red based on the 'signal' column
# fig.add_trace(go.Scatter(x=df.index,
#                          y=df['Close'],
#                          mode='lines',
#                          line=dict(color='green' if lcdf["signal"].iloc[-1] == 1 else 'red'),
#                          name='LCDF'))
#
# # Add text labels for 'prediction' values to the main chart subplot
# for i, prediction in enumerate(lcdf["prediction"]):
#     fig.add_annotation(
#         go.layout.Annotation(
#             x=df.index[i],
#             y=df["Close"].iloc[i],
#             text=str(prediction) + " " + str(lcdf["signal"].iloc[i]),
#             showarrow=False,
#             font=dict(color='white'),  # Optional: Set font color
#         ), row=1, col=1
#     )
#
# # Add RSI and SMA(RSI) to the RSI subplot
# fig.add_trace(go.Scatter(x=df.index, y=rsi, mode='lines', name='RSI'), row=2, col=1)
# fig.add_trace(go.Scatter(x=df.index, y=sma, mode='lines', name='SMA(RSI)'), row=2, col=1)
#
# # Add StochRSI to the StochRSI subplot
# fig.add_trace(go.Scatter(x=df.index, y=df['STOCHRSIk_14_14_3_3'], mode='lines', name='StochRSI %K'), row=3, col=1)
# fig.add_trace(go.Scatter(x=df.index, y=df['STOCHRSId_14_14_3_3'], mode='lines', name='StochRSI %D'), row=3, col=1)
#
# # Update subplot settings
# fig.update_layout(
#     xaxis_rangeslider_visible=False,
#     xaxis=dict(type='category'),
#     yaxis=dict(title='Price', showgrid=False),
#     yaxis2=dict(title='RSI', showgrid=False),
#     yaxis3=dict(title='StochRSI', showgrid=False),
#     yaxis4=dict(title='Indicators', overlaying='y', side='right'),
# )
#
# # Show the plot
# fig.show()
